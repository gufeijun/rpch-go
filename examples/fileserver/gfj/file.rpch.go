// This is code generated by hgen. DO NOT EDIT!!!
// hgen version: v0.1.1
// source: file.gfj

package gfj

import (
	rpch "github.com/gufeijun/rpch-go"
	"io"
)

type FileService interface {
	OpenFile(string) (stream io.ReadWriter, onFinish func(), err error)
	UploadFile(io.Reader, string) error
}

func RegisterFileService(impl FileService, svr *rpch.Server) {
	methods := map[string]*rpch.MethodDesc{
		"OpenFile":   rpch.BuildMethodDesc(impl, "OpenFile", "stream"),
		"UploadFile": rpch.BuildMethodDesc(impl, "UploadFile", ""),
	}
	service := &rpch.Service{
		Impl:    impl,
		Name:    "File",
		Methods: methods,
	}
	svr.Register(service)
}

type FileServiceClient struct {
	conn *rpch.Conn
}

func NewFileServiceClient(conn *rpch.Conn) *FileServiceClient {
	return &FileServiceClient{
		conn: conn,
	}
}

func (c *FileServiceClient) OpenFile(arg1 string) (res io.ReadWriteCloser, err error) {
	resp, err := c.conn.Call("File", "OpenFile",
		&rpch.RequestArg{
			TypeKind: 0,
			TypeName: "string",
			Data:     arg1,
		})
	if resp == nil {
		return
	}
	return resp.(io.ReadWriteCloser), err
}

func (c *FileServiceClient) UploadFile(arg1 io.Reader, arg2 string) (err error) {
	resp, err := c.conn.Call("File", "UploadFile",
		&rpch.RequestArg{
			TypeKind: 1,
			TypeName: "istream",
			Data:     arg1,
		},
		&rpch.RequestArg{
			TypeKind: 0,
			TypeName: "string",
			Data:     arg2,
		})
	if resp == nil {
		return
	}
	return err
}
